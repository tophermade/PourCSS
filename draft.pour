// variables
$textColor 	= "#333";
$tablet		= "768px"



// modules
mod	basics(param1, param2){
	font-size: param1
	background: url(param2)
}



//	mixdown example
///	any class can be used as a mixdown just like in LESS, but better,
///	instead of "mixing in" a variety of css and making the compiled
///	output huge like existing preprocessors, it yields a single instance
///	of the css mixdown, and applies it to the selectors once.
.mixdown{
	font-style: italic;
	border-radius: 5px;
}



// syntax examples
///	pretty straightforward variable and module usage. most interesting
///	things are @ which is for media queries & mixdowns are pretty sick
header{
	margin: 10px
	padding: 10px
	color: $textColor

	.mixdown

	.nested-class{
		position: relative
		font-size: 18px
		.mixdown
	}

	basics(12px, img/bg.jpg)

	@tablet{
		max-width: 90%
	}

	@960px{
		max-width: 940px
	}
}

article{
	basics(14px, rgba(0,0,0,.5))
	.mixdown

	@tablet{
		max-width: 80%
	}

	@960px{
		max-width: 880px
	}
}


nav{
	.mixdown
}


// syntax examples output
header, header .nested-class, article, nav{
	font-style: italic;
	border-radius: 5px;
}

header{
	margin: 10px;
	padding: 10px;
	color: #333;
	font-size: 12px;
	background: url(img/bg.jpg);
}

header .nested-class{
	position: relative;
	font-size: 18px;
}

article{
	font-size: 14px;
	background: rgba(0,0,0,.5);
}

@media screen and (min-width: 768px){
	header{
		max-width: 90%;
	}

	article{
		max-width: 80%;
	}
}

@media screen and (min-width:960px){
	header{
		max-width: 940px;
	}

	article{
		max-width: 880px;
	}
}